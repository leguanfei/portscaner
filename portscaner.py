# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'portscaner.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from time import sleep
import socket
import threading

# 端口扫描函数
def scan_ports(host, start_port, end_port,text_browser_signal,addopenport_signal):
    #text_browser_signal.emit("Scanning ports {} to {}".format(start_port, end_port))
    for port in range(start_port, end_port + 1):

        try:
            text_browser_signal.emit("Scanning ports {} ".format(port))
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(1)
            result = sock.connect_ex((host, port))

            if result == 0:
               
                text_browser_signal.emit(str(port)+"  is open")
                addopenport_signal.emit(str(port))
            else:
                text_browser_signal.emit(str(port)+"  is close")
            sock.close()
        except socket.error:
            text_browser_signal.emit(str(port)+"  is close")
            pass

class scan_ip_workthread(QtCore.QThread):
    signal=QtCore.pyqtSignal(str)
    addopenport_signal=QtCore.pyqtSignal(str)

    ip=""
    start_port=0
    end_port=0

    def run(self):
        scan_ports(self.ip,self.start_port,self.end_port,self.signal,self.addopenport_signal)

#扫描线程是否结束给出结果
class scanthread(QtCore.QThread):
    threads=[]
    signal=QtCore.pyqtSignal(bool)

    def run(self):
        n=0
        while(True):
            result=self.threads[n].isFinished()
            if(result==True):
                n+=1
                if(n==self.threads.__len__()):
                    sleep(3)
                    self.signal.emit(True)
                    break
            else:
                n=0
            


class Ui_MainWindow(QtWidgets.QMainWindow):
    #日志信息信号
    update_signal = QtCore.pyqtSignal(str)
    #线程结束信号
    threadfinish_signal=QtCore.pyqtSignal(bool)
    #添加开放端口信号
    addopenport_signal=QtCore.pyqtSignal(str)
    allopenport=[]
    resultthread=None
    #线程池
    threads=[]

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(689, 473)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.textEdit = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit.setGeometry(QtCore.QRect(130, 20, 241, 31))
        self.textEdit.setObjectName("textEdit")
        self.textBrowser = QtWidgets.QTextBrowser(self.centralwidget)
        self.textBrowser.setGeometry(QtCore.QRect(40, 130, 611, 271))
        self.textBrowser.setObjectName("textBrowser")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(500, 20, 111, 81))
        self.pushButton.setObjectName("pushButton")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(50, 30, 72, 15))
        self.label.setObjectName("label")
        self.textEdit_2 = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit_2.setGeometry(QtCore.QRect(130, 80, 91, 31))
        self.textEdit_2.setObjectName("textEdit_2")
        self.textEdit_3 = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit_3.setGeometry(QtCore.QRect(270, 80, 101, 31))
        self.textEdit_3.setObjectName("textEdit_3")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(50, 90, 72, 15))
        self.label_2.setObjectName("label_2")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 689, 26))
        self.menubar.setObjectName("menubar")
        self.menu = QtWidgets.QMenu(self.menubar)
        self.menu.setObjectName("menu")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.menubar.addAction(self.menu.menuAction())
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        #自己添加
        self.pushButton.clicked.connect(self.scan_ip)
        self.update_signal.connect(self.update_text_browser)
        self.threadfinish_signal.connect(self.threadfinish)
        self.addopenport_signal.connect(self.add_open_port)

    def retranslateUi(self, MainWindow):

        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "端口扫描工具 by 张龙飞"))
        self.pushButton.setText(_translate("MainWindow", "扫描/停止"))
        self.label.setText(_translate("MainWindow", "扫描地址"))
        self.textEdit_2.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'SimSun\'; font-size:9pt; font-weight:400; font-style:normal;\">\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p></body></html>"))
        self.label_2.setText(_translate("MainWindow", "端口范围"))
        self.menu.setTitle(_translate("MainWindow", ""))
    #更新textBrowser槽函数
    def update_text_browser(self, message):
        self.textBrowser.append(message)
    #添加开放端口槽函数
    def add_open_port(self, port):
        self.allopenport.append(port)
    #线程结束槽函数
    def threadfinish(self,result):
        if(result==True):
            self.update_text_browser("扫描结束")
            self.update_text_browser("所有开放端口如下：")
            for port in self.allopenport:
                self.update_text_browser(str(port))
            self.allopenport.clear()
        #扫描ip
    def scan_ip(self):
        
        if(self.threads.__len__()>0):

            self.resultthread.terminate()
            self.resultthread=None
            #暂停并清空线程池数组清空
            for thread in self.threads:
                thread.terminate()
            self.threads.clear()
            self.threads=[]
            self.update_signal.emit("----------------------停止扫描-------------------")

        else:

            self.textBrowser.clear()

            start_port=int(self.textEdit_2.toPlainText())
            end_port=int(self.textEdit_3.toPlainText())
            self.update_signal.emit("Scanning ports {} to {}".format(start_port, end_port))

            n=min(50,end_port-start_port+1)
            avgport=(end_port-start_port)//n+1

            end_port = start_port+avgport-1
            for i in range(n):  # 创建n个线程

                work = scan_ip_workthread(parent=self)

                work.ip=self.textEdit.toPlainText()
                work.start_port=start_port
                work.end_port=end_port

                work.signal=self.update_signal
                work.addopenport_signal=self.addopenport_signal

                self.threads.append(work)
                work.start()

                start_port += avgport  
                end_port += avgport
                end_port=min(end_port, 65535)
            
            
            self.resultthread=scanthread(parent=self)
            self.resultthread.threads=self.threads
            self.resultthread.signal=self.threadfinish_signal
            self.resultthread.start()

if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())